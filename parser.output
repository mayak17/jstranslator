Terminals unused in grammar

    FINAL


State 155 conflicts: 2 shift/reduce
State 166 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt_list

    2 exp: DIGIT
    3    | FLOAT_DIGIT
    4    | type ID
    5    | ID
    6    | STRINGONEQOUTED
    7    | STRINGDOUBLEQUOTED
    8    | exp '[' exp ']'
    9    | '(' exp ')'
   10    | exp '+' exp
   11    | exp '-' exp
   12    | exp '*' exp
   13    | exp '/' exp
   14    | exp '%' exp
   15    | exp EQUAL exp
   16    | exp STRICT_EQUAL exp
   17    | exp NOT_EQUAL exp
   18    | exp '>' exp
   19    | exp '<' exp
   20    | exp BIGGER_EQUAL exp
   21    | exp SMALLER_EQUAL exp
   22    | exp ASSIGNMENT exp
   23    | exp "**" exp
   24    | exp OR exp
   25    | exp AND exp
   26    | NOT exp
   27    | '+' exp
   28    | '-' exp
   29    | function_call

   30 stmt: SEMICOLON newline_seq_opt
   31     | BREAK SEMICOLON newline_seq_opt
   32     | BREAK newline_seq
   33     | exp SEMICOLON newline_seq_opt
   34     | exp newline_seq
   35     | '{' newline_seq_opt stmt_list '}' newline_seq_opt
   36     | array_handling
   37     | if_stmt
   38     | for_stmt
   39     | while_stmt
   40     | do_while_stmt
   41     | switch_stmt
   42     | for_of
   43     | input
   44     | output
   45     | function_stmt

   46 stmt_list: stmt
   47          | stmt_list stmt

   48 type: LET
   49     | VAR
   50     | CONST

   51 if_stmt: IF newline_seq_opt '(' exp ')' newline_seq_opt stmt
   52        | IF newline_seq_opt '(' exp ')' newline_seq_opt stmt ELSE newline_seq_opt stmt
   53        | IF newline_seq_opt '(' exp ')' newline_seq_opt stmt elseif_stmt_list
   54        | IF newline_seq_opt '(' exp ')' newline_seq_opt stmt elseif_stmt_list ELSE newline_seq_opt stmt

   55 elseif_stmt_list: elseif_stmt
   56                 | elseif_stmt_list elseif_stmt

   57 elseif_stmt: ELSEIF newline_seq_opt '(' exp ')' newline_seq_opt stmt

   58 for_stmt: FOR newline_seq_opt '(' exp SEMICOLON exp SEMICOLON exp ')' newline_seq_opt stmt

   59 while_stmt: WHILE newline_seq_opt '(' exp ')' newline_seq_opt stmt

   60 do_while_stmt: DO newline_seq_opt stmt WHILE newline_seq_opt '(' exp ')' SEMICOLON newline_seq_opt

   61 switch_stmt: SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list '}' newline_seq_opt
   62            | SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list default_stmt '}' newline_seq_opt

   63 case_stmt_list: case_stmt
   64               | case_stmt_list case_stmt

   65 case_stmt: CASE exp ':' newline_seq_opt
   66          | CASE exp ':' newline_seq_opt stmt_list

   67 default_stmt: DEFAULT ':' newline_seq_opt stmt_list

   68 newline_seq: NEWLINE
   69            | newline_seq NEWLINE

   70 newline_seq_opt: %empty
   71                | newline_seq

   72 for_of: FOR newline_seq_opt '(' exp OF exp ')' newline_seq_opt stmt

   73 array_handling: exp ASSIGNMENT '[' expr_list ']' SEMICOLON newline_seq_opt

   74 expr_list: exp
   75          | expr_list ',' exp

   76 id_list: ID
   77        | id_list ',' ID

   78 id_list_opt: %empty
   79            | id_list

   80 expr_list_opt: %empty
   81              | expr_list

   82 stmt_list_opt: %empty
   83              | stmt_list

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt '(' id_list_opt ')' newline_seq_opt '{' newline_seq_opt stmt_list_opt '}' newline_seq_opt

   85 function_call: ID '(' expr_list_opt ')'

   86 input: INPUT '(' exp ')' SEMICOLON newline_seq_opt
   87      | INPUT '(' exp ')' newline_seq

   88 output: OUTPUT '(' exp ')' SEMICOLON newline_seq_opt
   89       | OUTPUT '(' exp ')' newline_seq


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 14
    '(' (40) 9 51 52 53 54 57 58 59 60 61 62 72 84 85 86 87 88 89
    ')' (41) 9 51 52 53 54 57 58 59 60 61 62 72 84 85 86 87 88 89
    '*' (42) 12
    '+' (43) 10 27
    ',' (44) 75 77
    '-' (45) 11 28
    '/' (47) 13
    ':' (58) 65 66 67
    '<' (60) 19
    '>' (62) 18
    '[' (91) 8 73
    ']' (93) 8 73
    '{' (123) 35 61 62 84
    '}' (125) 35 61 62 84
    error (256)
    DIGIT <Int_val> (258) 2
    FLOAT_DIGIT <Float> (259) 3
    ID <Id> (260) 4 5 76 77 84 85
    STRINGONEQOUTED <Id> (261) 6
    STRINGDOUBLEQUOTED <Id> (262) 7
    EQUAL (263) 15
    STRICT_EQUAL (264) 16
    NOT_EQUAL (265) 17
    BIGGER_EQUAL (266) 20
    SMALLER_EQUAL (267) 21
    ASSIGNMENT (268) 22 73
    "**" (269) 23
    OR (270) 24
    NOT (271) 26
    AND (272) 25
    IF (273) 51 52 53 54
    ELSE (274) 52 54
    ELSEIF (275) 57
    FOR (276) 58 72
    WHILE (277) 59 60
    DO (278) 60
    SWITCH (279) 61 62
    CASE (280) 65 66
    BREAK (281) 31 32
    DEFAULT (282) 67
    OF (283) 72
    INPUT (284) 86 87
    OUTPUT (285) 88 89
    SEMICOLON (286) 30 31 33 58 60 73 86 88
    NEWLINE (287) 68 69
    LET (288) 48
    VAR (289) 49
    CONST (290) 50
    FINAL (291)
    FUNCTION (292) 84
    UMINUS (293)
    UPLUS (294)


Nonterminals, with rules where they appear

    $accept (55)
        on left: 0
    program <stmt_list_value> (56)
        on left: 1
        on right: 0
    exp <expr_value> (57)
        on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
        on right: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 33 34 51 52 53 54 57 58 59 60 61 62 65 66 72 73 74 75 86 87 88 89
    stmt <stmt_value> (58)
        on left: 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
        on right: 46 47 51 52 53 54 57 58 59 60 72
    stmt_list <stmt_list_value> (59)
        on left: 46 47
        on right: 1 35 47 66 67 83
    type (60)
        on left: 48 49 50
        on right: 4
    if_stmt <if_stmt_value> (61)
        on left: 51 52 53 54
        on right: 37
    elseif_stmt_list <elseif_stmt_list_value> (62)
        on left: 55 56
        on right: 53 54 56
    elseif_stmt <elseif_stmt_value> (63)
        on left: 57
        on right: 55 56
    for_stmt <for_stmt_value> (64)
        on left: 58
        on right: 38
    while_stmt <stmt_value> (65)
        on left: 59
        on right: 39
    do_while_stmt <stmt_value> (66)
        on left: 60
        on right: 40
    switch_stmt <switch_stmt_value> (67)
        on left: 61 62
        on right: 41
    case_stmt_list <case_stmt_list_value> (68)
        on left: 63 64
        on right: 61 62 64
    case_stmt <case_stmt_value> (69)
        on left: 65 66
        on right: 63 64
    default_stmt <default_stmt_value> (70)
        on left: 67
        on right: 62
    newline_seq (71)
        on left: 68 69
        on right: 32 34 69 71 87 89
    newline_seq_opt (72)
        on left: 70 71
        on right: 30 31 33 35 51 52 53 54 57 58 59 60 61 62 65 66 67 72 73 84 86 88
    for_of <forOf_stmt_value> (73)
        on left: 72
        on right: 42
    array_handling <array_handling_value> (74)
        on left: 73
        on right: 36
    expr_list <expr_list_value> (75)
        on left: 74 75
        on right: 73 75 81
    id_list <id_list_value> (76)
        on left: 76 77
        on right: 77 79
    id_list_opt <id_list_value> (77)
        on left: 78 79
        on right: 84
    expr_list_opt <expr_list_value> (78)
        on left: 80 81
        on right: 85
    stmt_list_opt <stmt_list_value> (79)
        on left: 82 83
        on right: 84
    function_stmt <function_stmt_value> (80)
        on left: 84
        on right: 45
    function_call <function_call_value> (81)
        on left: 85
        on right: 29
    input <stmt_value> (82)
        on left: 86 87
        on right: 43
    output <stmt_value> (83)
        on left: 88 89
        on right: 44


State 0

    0 $accept: . program $end

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    program         go to state 24
    exp             go to state 25
    stmt            go to state 26
    stmt_list       go to state 27
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 1

    2 exp: DIGIT .

    $default  reduce using rule 2 (exp)


State 2

    3 exp: FLOAT_DIGIT .

    $default  reduce using rule 3 (exp)


State 3

    5 exp: ID .
   85 function_call: ID . '(' expr_list_opt ')'

    '('  shift, and go to state 40

    $default  reduce using rule 5 (exp)


State 4

    6 exp: STRINGONEQOUTED .

    $default  reduce using rule 6 (exp)


State 5

    7 exp: STRINGDOUBLEQUOTED .

    $default  reduce using rule 7 (exp)


State 6

   26 exp: NOT . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 41
    type           go to state 28
    function_call  go to state 37


State 7

   51 if_stmt: IF . newline_seq_opt '(' exp ')' newline_seq_opt stmt
   52        | IF . newline_seq_opt '(' exp ')' newline_seq_opt stmt ELSE newline_seq_opt stmt
   53        | IF . newline_seq_opt '(' exp ')' newline_seq_opt stmt elseif_stmt_list
   54        | IF . newline_seq_opt '(' exp ')' newline_seq_opt stmt elseif_stmt_list ELSE newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 44


State 8

   58 for_stmt: FOR . newline_seq_opt '(' exp SEMICOLON exp SEMICOLON exp ')' newline_seq_opt stmt
   72 for_of: FOR . newline_seq_opt '(' exp OF exp ')' newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 45


State 9

   59 while_stmt: WHILE . newline_seq_opt '(' exp ')' newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 46


State 10

   60 do_while_stmt: DO . newline_seq_opt stmt WHILE newline_seq_opt '(' exp ')' SEMICOLON newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 47


State 11

   61 switch_stmt: SWITCH . newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list '}' newline_seq_opt
   62            | SWITCH . newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list default_stmt '}' newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 48


State 12

   31 stmt: BREAK . SEMICOLON newline_seq_opt
   32     | BREAK . newline_seq

    SEMICOLON  shift, and go to state 49
    NEWLINE    shift, and go to state 42

    newline_seq  go to state 50


State 13

   86 input: INPUT . '(' exp ')' SEMICOLON newline_seq_opt
   87      | INPUT . '(' exp ')' newline_seq

    '('  shift, and go to state 51


State 14

   88 output: OUTPUT . '(' exp ')' SEMICOLON newline_seq_opt
   89       | OUTPUT . '(' exp ')' newline_seq

    '('  shift, and go to state 52


State 15

   30 stmt: SEMICOLON . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 53


State 16

   48 type: LET .

    $default  reduce using rule 48 (type)


State 17

   49 type: VAR .

    $default  reduce using rule 49 (type)


State 18

   50 type: CONST .

    $default  reduce using rule 50 (type)


State 19

   84 function_stmt: FUNCTION . newline_seq_opt ID newline_seq_opt '(' id_list_opt ')' newline_seq_opt '{' newline_seq_opt stmt_list_opt '}' newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 54


State 20

   27 exp: '+' . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 55
    type           go to state 28
    function_call  go to state 37


State 21

   28 exp: '-' . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 56
    type           go to state 28
    function_call  go to state 37


State 22

    9 exp: '(' . exp ')'

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 57
    type           go to state 28
    function_call  go to state 37


State 23

   35 stmt: '{' . newline_seq_opt stmt_list '}' newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 58


State 24

    0 $accept: program . $end

    $end  shift, and go to state 59


State 25

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   33 stmt: exp . SEMICOLON newline_seq_opt
   34     | exp . newline_seq
   73 array_handling: exp . ASSIGNMENT '[' expr_list ']' SEMICOLON newline_seq_opt

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 65
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    SEMICOLON      shift, and go to state 69
    NEWLINE        shift, and go to state 42
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77

    newline_seq  go to state 78


State 26

   46 stmt_list: stmt .

    $default  reduce using rule 46 (stmt_list)


State 27

    1 program: stmt_list .
   47 stmt_list: stmt_list . stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    $default  reduce using rule 1 (program)

    exp             go to state 25
    stmt            go to state 79
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 28

    4 exp: type . ID

    ID  shift, and go to state 80


State 29

   37 stmt: if_stmt .

    $default  reduce using rule 37 (stmt)


State 30

   38 stmt: for_stmt .

    $default  reduce using rule 38 (stmt)


State 31

   39 stmt: while_stmt .

    $default  reduce using rule 39 (stmt)


State 32

   40 stmt: do_while_stmt .

    $default  reduce using rule 40 (stmt)


State 33

   41 stmt: switch_stmt .

    $default  reduce using rule 41 (stmt)


State 34

   42 stmt: for_of .

    $default  reduce using rule 42 (stmt)


State 35

   36 stmt: array_handling .

    $default  reduce using rule 36 (stmt)


State 36

   45 stmt: function_stmt .

    $default  reduce using rule 45 (stmt)


State 37

   29 exp: function_call .

    $default  reduce using rule 29 (exp)


State 38

   43 stmt: input .

    $default  reduce using rule 43 (stmt)


State 39

   44 stmt: output .

    $default  reduce using rule 44 (stmt)


State 40

   85 function_call: ID '(' . expr_list_opt ')'

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    $default  reduce using rule 80 (expr_list_opt)

    exp            go to state 81
    type           go to state 28
    expr_list      go to state 82
    expr_list_opt  go to state 83
    function_call  go to state 37


State 41

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   26    | NOT exp .

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    "**"           shift, and go to state 66
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77

    $default  reduce using rule 26 (exp)


State 42

   68 newline_seq: NEWLINE .

    $default  reduce using rule 68 (newline_seq)


State 43

   69 newline_seq: newline_seq . NEWLINE
   71 newline_seq_opt: newline_seq .

    NEWLINE  shift, and go to state 85

    $default  reduce using rule 71 (newline_seq_opt)


State 44

   51 if_stmt: IF newline_seq_opt . '(' exp ')' newline_seq_opt stmt
   52        | IF newline_seq_opt . '(' exp ')' newline_seq_opt stmt ELSE newline_seq_opt stmt
   53        | IF newline_seq_opt . '(' exp ')' newline_seq_opt stmt elseif_stmt_list
   54        | IF newline_seq_opt . '(' exp ')' newline_seq_opt stmt elseif_stmt_list ELSE newline_seq_opt stmt

    '('  shift, and go to state 86


State 45

   58 for_stmt: FOR newline_seq_opt . '(' exp SEMICOLON exp SEMICOLON exp ')' newline_seq_opt stmt
   72 for_of: FOR newline_seq_opt . '(' exp OF exp ')' newline_seq_opt stmt

    '('  shift, and go to state 87


State 46

   59 while_stmt: WHILE newline_seq_opt . '(' exp ')' newline_seq_opt stmt

    '('  shift, and go to state 88


State 47

   60 do_while_stmt: DO newline_seq_opt . stmt WHILE newline_seq_opt '(' exp ')' SEMICOLON newline_seq_opt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    exp             go to state 25
    stmt            go to state 89
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 48

   61 switch_stmt: SWITCH newline_seq_opt . '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list '}' newline_seq_opt
   62            | SWITCH newline_seq_opt . '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list default_stmt '}' newline_seq_opt

    '('  shift, and go to state 90


State 49

   31 stmt: BREAK SEMICOLON . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 91


State 50

   32 stmt: BREAK newline_seq .
   69 newline_seq: newline_seq . NEWLINE

    NEWLINE  shift, and go to state 85

    $default  reduce using rule 32 (stmt)


State 51

   86 input: INPUT '(' . exp ')' SEMICOLON newline_seq_opt
   87      | INPUT '(' . exp ')' newline_seq

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 92
    type           go to state 28
    function_call  go to state 37


State 52

   88 output: OUTPUT '(' . exp ')' SEMICOLON newline_seq_opt
   89       | OUTPUT '(' . exp ')' newline_seq

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 93
    type           go to state 28
    function_call  go to state 37


State 53

   30 stmt: SEMICOLON newline_seq_opt .

    $default  reduce using rule 30 (stmt)


State 54

   84 function_stmt: FUNCTION newline_seq_opt . ID newline_seq_opt '(' id_list_opt ')' newline_seq_opt '{' newline_seq_opt stmt_list_opt '}' newline_seq_opt

    ID  shift, and go to state 94


State 55

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   27    | '+' exp .

    '['  shift, and go to state 77

    $default  reduce using rule 27 (exp)


State 56

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   28    | '-' exp .

    '['  shift, and go to state 77

    $default  reduce using rule 28 (exp)


State 57

    8 exp: exp . '[' exp ']'
    9    | '(' exp . ')'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ')'            shift, and go to state 95


State 58

   35 stmt: '{' newline_seq_opt . stmt_list '}' newline_seq_opt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    exp             go to state 25
    stmt            go to state 26
    stmt_list       go to state 96
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 59

    0 $accept: program $end .

    $default  accept


State 60

   15 exp: exp EQUAL . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 97
    type           go to state 28
    function_call  go to state 37


State 61

   16 exp: exp STRICT_EQUAL . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 98
    type           go to state 28
    function_call  go to state 37


State 62

   17 exp: exp NOT_EQUAL . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 99
    type           go to state 28
    function_call  go to state 37


State 63

   20 exp: exp BIGGER_EQUAL . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 100
    type           go to state 28
    function_call  go to state 37


State 64

   21 exp: exp SMALLER_EQUAL . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 101
    type           go to state 28
    function_call  go to state 37


State 65

   22 exp: exp ASSIGNMENT . exp
   73 array_handling: exp ASSIGNMENT . '[' expr_list ']' SEMICOLON newline_seq_opt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '['                 shift, and go to state 102
    '('                 shift, and go to state 22

    exp            go to state 103
    type           go to state 28
    function_call  go to state 37


State 66

   23 exp: exp "**" . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 104
    type           go to state 28
    function_call  go to state 37


State 67

   24 exp: exp OR . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 105
    type           go to state 28
    function_call  go to state 37


State 68

   25 exp: exp AND . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 106
    type           go to state 28
    function_call  go to state 37


State 69

   33 stmt: exp SEMICOLON . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 107


State 70

   18 exp: exp '>' . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 108
    type           go to state 28
    function_call  go to state 37


State 71

   19 exp: exp '<' . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 109
    type           go to state 28
    function_call  go to state 37


State 72

   10 exp: exp '+' . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 110
    type           go to state 28
    function_call  go to state 37


State 73

   11 exp: exp '-' . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 111
    type           go to state 28
    function_call  go to state 37


State 74

   12 exp: exp '*' . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 112
    type           go to state 28
    function_call  go to state 37


State 75

   13 exp: exp '/' . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 113
    type           go to state 28
    function_call  go to state 37


State 76

   14 exp: exp '%' . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 114
    type           go to state 28
    function_call  go to state 37


State 77

    8 exp: exp '[' . exp ']'

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 115
    type           go to state 28
    function_call  go to state 37


State 78

   34 stmt: exp newline_seq .
   69 newline_seq: newline_seq . NEWLINE

    NEWLINE  shift, and go to state 85

    $default  reduce using rule 34 (stmt)


State 79

   47 stmt_list: stmt_list stmt .

    $default  reduce using rule 47 (stmt_list)


State 80

    4 exp: type ID .

    $default  reduce using rule 4 (exp)


State 81

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   74 expr_list: exp .

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77

    $default  reduce using rule 74 (expr_list)


State 82

   75 expr_list: expr_list . ',' exp
   81 expr_list_opt: expr_list .

    ','  shift, and go to state 116

    $default  reduce using rule 81 (expr_list_opt)


State 83

   85 function_call: ID '(' expr_list_opt . ')'

    ')'  shift, and go to state 117


State 84

   22 exp: exp ASSIGNMENT . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 103
    type           go to state 28
    function_call  go to state 37


State 85

   69 newline_seq: newline_seq NEWLINE .

    $default  reduce using rule 69 (newline_seq)


State 86

   51 if_stmt: IF newline_seq_opt '(' . exp ')' newline_seq_opt stmt
   52        | IF newline_seq_opt '(' . exp ')' newline_seq_opt stmt ELSE newline_seq_opt stmt
   53        | IF newline_seq_opt '(' . exp ')' newline_seq_opt stmt elseif_stmt_list
   54        | IF newline_seq_opt '(' . exp ')' newline_seq_opt stmt elseif_stmt_list ELSE newline_seq_opt stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 118
    type           go to state 28
    function_call  go to state 37


State 87

   58 for_stmt: FOR newline_seq_opt '(' . exp SEMICOLON exp SEMICOLON exp ')' newline_seq_opt stmt
   72 for_of: FOR newline_seq_opt '(' . exp OF exp ')' newline_seq_opt stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 119
    type           go to state 28
    function_call  go to state 37


State 88

   59 while_stmt: WHILE newline_seq_opt '(' . exp ')' newline_seq_opt stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 120
    type           go to state 28
    function_call  go to state 37


State 89

   60 do_while_stmt: DO newline_seq_opt stmt . WHILE newline_seq_opt '(' exp ')' SEMICOLON newline_seq_opt

    WHILE  shift, and go to state 121


State 90

   61 switch_stmt: SWITCH newline_seq_opt '(' . exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list '}' newline_seq_opt
   62            | SWITCH newline_seq_opt '(' . exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list default_stmt '}' newline_seq_opt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 122
    type           go to state 28
    function_call  go to state 37


State 91

   31 stmt: BREAK SEMICOLON newline_seq_opt .

    $default  reduce using rule 31 (stmt)


State 92

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   86 input: INPUT '(' exp . ')' SEMICOLON newline_seq_opt
   87      | INPUT '(' exp . ')' newline_seq

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ')'            shift, and go to state 123


State 93

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   88 output: OUTPUT '(' exp . ')' SEMICOLON newline_seq_opt
   89       | OUTPUT '(' exp . ')' newline_seq

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ')'            shift, and go to state 124


State 94

   84 function_stmt: FUNCTION newline_seq_opt ID . newline_seq_opt '(' id_list_opt ')' newline_seq_opt '{' newline_seq_opt stmt_list_opt '}' newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 125


State 95

    9 exp: '(' exp ')' .

    $default  reduce using rule 9 (exp)


State 96

   35 stmt: '{' newline_seq_opt stmt_list . '}' newline_seq_opt
   47 stmt_list: stmt_list . stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23
    '}'                 shift, and go to state 126

    exp             go to state 25
    stmt            go to state 79
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 97

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   15    | exp EQUAL exp .
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    "**"           shift, and go to state 66
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77

    $default  reduce using rule 15 (exp)


State 98

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   16    | exp STRICT_EQUAL exp .
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    "**"           shift, and go to state 66
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77

    $default  reduce using rule 16 (exp)


State 99

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   17    | exp NOT_EQUAL exp .
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    "**"           shift, and go to state 66
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77

    $default  reduce using rule 17 (exp)


State 100

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   20    | exp BIGGER_EQUAL exp .
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    "**"  shift, and go to state 66
    '+'   shift, and go to state 72
    '-'   shift, and go to state 73
    '*'   shift, and go to state 74
    '/'   shift, and go to state 75
    '%'   shift, and go to state 76
    '['   shift, and go to state 77

    $default  reduce using rule 20 (exp)


State 101

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   21    | exp SMALLER_EQUAL exp .
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    "**"  shift, and go to state 66
    '+'   shift, and go to state 72
    '-'   shift, and go to state 73
    '*'   shift, and go to state 74
    '/'   shift, and go to state 75
    '%'   shift, and go to state 76
    '['   shift, and go to state 77

    $default  reduce using rule 21 (exp)


State 102

   73 array_handling: exp ASSIGNMENT '[' . expr_list ']' SEMICOLON newline_seq_opt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 81
    type           go to state 28
    expr_list      go to state 127
    function_call  go to state 37


State 103

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   22    | exp ASSIGNMENT exp .
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77

    $default  reduce using rule 22 (exp)


State 104

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   23    | exp "**" exp .
   24    | exp . OR exp
   25    | exp . AND exp

    '['  shift, and go to state 77

    $default  reduce using rule 23 (exp)


State 105

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   24    | exp OR exp .
   25    | exp . AND exp

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    "**"           shift, and go to state 66
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77

    $default  reduce using rule 24 (exp)


State 106

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   25    | exp AND exp .

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    "**"           shift, and go to state 66
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77

    $default  reduce using rule 25 (exp)


State 107

   33 stmt: exp SEMICOLON newline_seq_opt .

    $default  reduce using rule 33 (stmt)


State 108

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   18    | exp '>' exp .
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    "**"  shift, and go to state 66
    '+'   shift, and go to state 72
    '-'   shift, and go to state 73
    '*'   shift, and go to state 74
    '/'   shift, and go to state 75
    '%'   shift, and go to state 76
    '['   shift, and go to state 77

    $default  reduce using rule 18 (exp)


State 109

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   19    | exp '<' exp .
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    "**"  shift, and go to state 66
    '+'   shift, and go to state 72
    '-'   shift, and go to state 73
    '*'   shift, and go to state 74
    '/'   shift, and go to state 75
    '%'   shift, and go to state 76
    '['   shift, and go to state 77

    $default  reduce using rule 19 (exp)


State 110

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   10    | exp '+' exp .
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    "**"  shift, and go to state 66
    '*'   shift, and go to state 74
    '/'   shift, and go to state 75
    '%'   shift, and go to state 76
    '['   shift, and go to state 77

    $default  reduce using rule 10 (exp)


State 111

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   11    | exp '-' exp .
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    "**"  shift, and go to state 66
    '*'   shift, and go to state 74
    '/'   shift, and go to state 75
    '%'   shift, and go to state 76
    '['   shift, and go to state 77

    $default  reduce using rule 11 (exp)


State 112

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   12    | exp '*' exp .
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    "**"  shift, and go to state 66
    '['   shift, and go to state 77

    $default  reduce using rule 12 (exp)


State 113

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   13    | exp '/' exp .
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    "**"  shift, and go to state 66
    '['   shift, and go to state 77

    $default  reduce using rule 13 (exp)


State 114

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   14    | exp '%' exp .
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    "**"  shift, and go to state 66
    '['   shift, and go to state 77

    $default  reduce using rule 14 (exp)


State 115

    8 exp: exp . '[' exp ']'
    8    | exp '[' exp . ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ']'            shift, and go to state 128


State 116

   75 expr_list: expr_list ',' . exp

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 129
    type           go to state 28
    function_call  go to state 37


State 117

   85 function_call: ID '(' expr_list_opt ')' .

    $default  reduce using rule 85 (function_call)


State 118

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   51 if_stmt: IF newline_seq_opt '(' exp . ')' newline_seq_opt stmt
   52        | IF newline_seq_opt '(' exp . ')' newline_seq_opt stmt ELSE newline_seq_opt stmt
   53        | IF newline_seq_opt '(' exp . ')' newline_seq_opt stmt elseif_stmt_list
   54        | IF newline_seq_opt '(' exp . ')' newline_seq_opt stmt elseif_stmt_list ELSE newline_seq_opt stmt

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ')'            shift, and go to state 130


State 119

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   58 for_stmt: FOR newline_seq_opt '(' exp . SEMICOLON exp SEMICOLON exp ')' newline_seq_opt stmt
   72 for_of: FOR newline_seq_opt '(' exp . OF exp ')' newline_seq_opt stmt

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    OF             shift, and go to state 131
    SEMICOLON      shift, and go to state 132
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77


State 120

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   59 while_stmt: WHILE newline_seq_opt '(' exp . ')' newline_seq_opt stmt

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ')'            shift, and go to state 133


State 121

   60 do_while_stmt: DO newline_seq_opt stmt WHILE . newline_seq_opt '(' exp ')' SEMICOLON newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 134


State 122

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   61 switch_stmt: SWITCH newline_seq_opt '(' exp . ')' newline_seq_opt '{' newline_seq_opt case_stmt_list '}' newline_seq_opt
   62            | SWITCH newline_seq_opt '(' exp . ')' newline_seq_opt '{' newline_seq_opt case_stmt_list default_stmt '}' newline_seq_opt

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ')'            shift, and go to state 135


State 123

   86 input: INPUT '(' exp ')' . SEMICOLON newline_seq_opt
   87      | INPUT '(' exp ')' . newline_seq

    SEMICOLON  shift, and go to state 136
    NEWLINE    shift, and go to state 42

    newline_seq  go to state 137


State 124

   88 output: OUTPUT '(' exp ')' . SEMICOLON newline_seq_opt
   89       | OUTPUT '(' exp ')' . newline_seq

    SEMICOLON  shift, and go to state 138
    NEWLINE    shift, and go to state 42

    newline_seq  go to state 139


State 125

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt . '(' id_list_opt ')' newline_seq_opt '{' newline_seq_opt stmt_list_opt '}' newline_seq_opt

    '('  shift, and go to state 140


State 126

   35 stmt: '{' newline_seq_opt stmt_list '}' . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 141


State 127

   73 array_handling: exp ASSIGNMENT '[' expr_list . ']' SEMICOLON newline_seq_opt
   75 expr_list: expr_list . ',' exp

    ']'  shift, and go to state 142
    ','  shift, and go to state 116


State 128

    8 exp: exp '[' exp ']' .

    $default  reduce using rule 8 (exp)


State 129

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   75 expr_list: expr_list ',' exp .

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77

    $default  reduce using rule 75 (expr_list)


State 130

   51 if_stmt: IF newline_seq_opt '(' exp ')' . newline_seq_opt stmt
   52        | IF newline_seq_opt '(' exp ')' . newline_seq_opt stmt ELSE newline_seq_opt stmt
   53        | IF newline_seq_opt '(' exp ')' . newline_seq_opt stmt elseif_stmt_list
   54        | IF newline_seq_opt '(' exp ')' . newline_seq_opt stmt elseif_stmt_list ELSE newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 143


State 131

   72 for_of: FOR newline_seq_opt '(' exp OF . exp ')' newline_seq_opt stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 144
    type           go to state 28
    function_call  go to state 37


State 132

   58 for_stmt: FOR newline_seq_opt '(' exp SEMICOLON . exp SEMICOLON exp ')' newline_seq_opt stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 145
    type           go to state 28
    function_call  go to state 37


State 133

   59 while_stmt: WHILE newline_seq_opt '(' exp ')' . newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 146


State 134

   60 do_while_stmt: DO newline_seq_opt stmt WHILE newline_seq_opt . '(' exp ')' SEMICOLON newline_seq_opt

    '('  shift, and go to state 147


State 135

   61 switch_stmt: SWITCH newline_seq_opt '(' exp ')' . newline_seq_opt '{' newline_seq_opt case_stmt_list '}' newline_seq_opt
   62            | SWITCH newline_seq_opt '(' exp ')' . newline_seq_opt '{' newline_seq_opt case_stmt_list default_stmt '}' newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 148


State 136

   86 input: INPUT '(' exp ')' SEMICOLON . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 149


State 137

   69 newline_seq: newline_seq . NEWLINE
   87 input: INPUT '(' exp ')' newline_seq .

    NEWLINE  shift, and go to state 85

    $default  reduce using rule 87 (input)


State 138

   88 output: OUTPUT '(' exp ')' SEMICOLON . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 150


State 139

   69 newline_seq: newline_seq . NEWLINE
   89 output: OUTPUT '(' exp ')' newline_seq .

    NEWLINE  shift, and go to state 85

    $default  reduce using rule 89 (output)


State 140

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt '(' . id_list_opt ')' newline_seq_opt '{' newline_seq_opt stmt_list_opt '}' newline_seq_opt

    ID  shift, and go to state 151

    $default  reduce using rule 78 (id_list_opt)

    id_list      go to state 152
    id_list_opt  go to state 153


State 141

   35 stmt: '{' newline_seq_opt stmt_list '}' newline_seq_opt .

    $default  reduce using rule 35 (stmt)


State 142

   73 array_handling: exp ASSIGNMENT '[' expr_list ']' . SEMICOLON newline_seq_opt

    SEMICOLON  shift, and go to state 154


State 143

   51 if_stmt: IF newline_seq_opt '(' exp ')' newline_seq_opt . stmt
   52        | IF newline_seq_opt '(' exp ')' newline_seq_opt . stmt ELSE newline_seq_opt stmt
   53        | IF newline_seq_opt '(' exp ')' newline_seq_opt . stmt elseif_stmt_list
   54        | IF newline_seq_opt '(' exp ')' newline_seq_opt . stmt elseif_stmt_list ELSE newline_seq_opt stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    exp             go to state 25
    stmt            go to state 155
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 144

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   72 for_of: FOR newline_seq_opt '(' exp OF exp . ')' newline_seq_opt stmt

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ')'            shift, and go to state 156


State 145

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   58 for_stmt: FOR newline_seq_opt '(' exp SEMICOLON exp . SEMICOLON exp ')' newline_seq_opt stmt

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    SEMICOLON      shift, and go to state 157
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77


State 146

   59 while_stmt: WHILE newline_seq_opt '(' exp ')' newline_seq_opt . stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    exp             go to state 25
    stmt            go to state 158
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 147

   60 do_while_stmt: DO newline_seq_opt stmt WHILE newline_seq_opt '(' . exp ')' SEMICOLON newline_seq_opt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 159
    type           go to state 28
    function_call  go to state 37


State 148

   61 switch_stmt: SWITCH newline_seq_opt '(' exp ')' newline_seq_opt . '{' newline_seq_opt case_stmt_list '}' newline_seq_opt
   62            | SWITCH newline_seq_opt '(' exp ')' newline_seq_opt . '{' newline_seq_opt case_stmt_list default_stmt '}' newline_seq_opt

    '{'  shift, and go to state 160


State 149

   86 input: INPUT '(' exp ')' SEMICOLON newline_seq_opt .

    $default  reduce using rule 86 (input)


State 150

   88 output: OUTPUT '(' exp ')' SEMICOLON newline_seq_opt .

    $default  reduce using rule 88 (output)


State 151

   76 id_list: ID .

    $default  reduce using rule 76 (id_list)


State 152

   77 id_list: id_list . ',' ID
   79 id_list_opt: id_list .

    ','  shift, and go to state 161

    $default  reduce using rule 79 (id_list_opt)


State 153

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt '(' id_list_opt . ')' newline_seq_opt '{' newline_seq_opt stmt_list_opt '}' newline_seq_opt

    ')'  shift, and go to state 162


State 154

   73 array_handling: exp ASSIGNMENT '[' expr_list ']' SEMICOLON . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 163


State 155

   51 if_stmt: IF newline_seq_opt '(' exp ')' newline_seq_opt stmt .
   52        | IF newline_seq_opt '(' exp ')' newline_seq_opt stmt . ELSE newline_seq_opt stmt
   53        | IF newline_seq_opt '(' exp ')' newline_seq_opt stmt . elseif_stmt_list
   54        | IF newline_seq_opt '(' exp ')' newline_seq_opt stmt . elseif_stmt_list ELSE newline_seq_opt stmt

    ELSE    shift, and go to state 164
    ELSEIF  shift, and go to state 165

    ELSE      [reduce using rule 51 (if_stmt)]
    ELSEIF    [reduce using rule 51 (if_stmt)]
    $default  reduce using rule 51 (if_stmt)

    elseif_stmt_list  go to state 166
    elseif_stmt       go to state 167


State 156

   72 for_of: FOR newline_seq_opt '(' exp OF exp ')' . newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 168


State 157

   58 for_stmt: FOR newline_seq_opt '(' exp SEMICOLON exp SEMICOLON . exp ')' newline_seq_opt stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 169
    type           go to state 28
    function_call  go to state 37


State 158

   59 while_stmt: WHILE newline_seq_opt '(' exp ')' newline_seq_opt stmt .

    $default  reduce using rule 59 (while_stmt)


State 159

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   60 do_while_stmt: DO newline_seq_opt stmt WHILE newline_seq_opt '(' exp . ')' SEMICOLON newline_seq_opt

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ')'            shift, and go to state 170


State 160

   61 switch_stmt: SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' . newline_seq_opt case_stmt_list '}' newline_seq_opt
   62            | SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' . newline_seq_opt case_stmt_list default_stmt '}' newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 171


State 161

   77 id_list: id_list ',' . ID

    ID  shift, and go to state 172


State 162

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt '(' id_list_opt ')' . newline_seq_opt '{' newline_seq_opt stmt_list_opt '}' newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 173


State 163

   73 array_handling: exp ASSIGNMENT '[' expr_list ']' SEMICOLON newline_seq_opt .

    $default  reduce using rule 73 (array_handling)


State 164

   52 if_stmt: IF newline_seq_opt '(' exp ')' newline_seq_opt stmt ELSE . newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 174


State 165

   57 elseif_stmt: ELSEIF . newline_seq_opt '(' exp ')' newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 175


State 166

   53 if_stmt: IF newline_seq_opt '(' exp ')' newline_seq_opt stmt elseif_stmt_list .
   54        | IF newline_seq_opt '(' exp ')' newline_seq_opt stmt elseif_stmt_list . ELSE newline_seq_opt stmt
   56 elseif_stmt_list: elseif_stmt_list . elseif_stmt

    ELSE    shift, and go to state 176
    ELSEIF  shift, and go to state 165

    ELSE      [reduce using rule 53 (if_stmt)]
    ELSEIF    [reduce using rule 53 (if_stmt)]
    $default  reduce using rule 53 (if_stmt)

    elseif_stmt  go to state 177


State 167

   55 elseif_stmt_list: elseif_stmt .

    $default  reduce using rule 55 (elseif_stmt_list)


State 168

   72 for_of: FOR newline_seq_opt '(' exp OF exp ')' newline_seq_opt . stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    exp             go to state 25
    stmt            go to state 178
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 169

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   58 for_stmt: FOR newline_seq_opt '(' exp SEMICOLON exp SEMICOLON exp . ')' newline_seq_opt stmt

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ')'            shift, and go to state 179


State 170

   60 do_while_stmt: DO newline_seq_opt stmt WHILE newline_seq_opt '(' exp ')' . SEMICOLON newline_seq_opt

    SEMICOLON  shift, and go to state 180


State 171

   61 switch_stmt: SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt . case_stmt_list '}' newline_seq_opt
   62            | SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt . case_stmt_list default_stmt '}' newline_seq_opt

    CASE  shift, and go to state 181

    case_stmt_list  go to state 182
    case_stmt       go to state 183


State 172

   77 id_list: id_list ',' ID .

    $default  reduce using rule 77 (id_list)


State 173

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt '(' id_list_opt ')' newline_seq_opt . '{' newline_seq_opt stmt_list_opt '}' newline_seq_opt

    '{'  shift, and go to state 184


State 174

   52 if_stmt: IF newline_seq_opt '(' exp ')' newline_seq_opt stmt ELSE newline_seq_opt . stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    exp             go to state 25
    stmt            go to state 185
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 175

   57 elseif_stmt: ELSEIF newline_seq_opt . '(' exp ')' newline_seq_opt stmt

    '('  shift, and go to state 186


State 176

   54 if_stmt: IF newline_seq_opt '(' exp ')' newline_seq_opt stmt elseif_stmt_list ELSE . newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 187


State 177

   56 elseif_stmt_list: elseif_stmt_list elseif_stmt .

    $default  reduce using rule 56 (elseif_stmt_list)


State 178

   72 for_of: FOR newline_seq_opt '(' exp OF exp ')' newline_seq_opt stmt .

    $default  reduce using rule 72 (for_of)


State 179

   58 for_stmt: FOR newline_seq_opt '(' exp SEMICOLON exp SEMICOLON exp ')' . newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 188


State 180

   60 do_while_stmt: DO newline_seq_opt stmt WHILE newline_seq_opt '(' exp ')' SEMICOLON . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 189


State 181

   65 case_stmt: CASE . exp ':' newline_seq_opt
   66          | CASE . exp ':' newline_seq_opt stmt_list

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 190
    type           go to state 28
    function_call  go to state 37


State 182

   61 switch_stmt: SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list . '}' newline_seq_opt
   62            | SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list . default_stmt '}' newline_seq_opt
   64 case_stmt_list: case_stmt_list . case_stmt

    CASE     shift, and go to state 181
    DEFAULT  shift, and go to state 191
    '}'      shift, and go to state 192

    case_stmt     go to state 193
    default_stmt  go to state 194


State 183

   63 case_stmt_list: case_stmt .

    $default  reduce using rule 63 (case_stmt_list)


State 184

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt '(' id_list_opt ')' newline_seq_opt '{' . newline_seq_opt stmt_list_opt '}' newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 195


State 185

   52 if_stmt: IF newline_seq_opt '(' exp ')' newline_seq_opt stmt ELSE newline_seq_opt stmt .

    $default  reduce using rule 52 (if_stmt)


State 186

   57 elseif_stmt: ELSEIF newline_seq_opt '(' . exp ')' newline_seq_opt stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22

    exp            go to state 196
    type           go to state 28
    function_call  go to state 37


State 187

   54 if_stmt: IF newline_seq_opt '(' exp ')' newline_seq_opt stmt elseif_stmt_list ELSE newline_seq_opt . stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    exp             go to state 25
    stmt            go to state 197
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 188

   58 for_stmt: FOR newline_seq_opt '(' exp SEMICOLON exp SEMICOLON exp ')' newline_seq_opt . stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    exp             go to state 25
    stmt            go to state 198
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 189

   60 do_while_stmt: DO newline_seq_opt stmt WHILE newline_seq_opt '(' exp ')' SEMICOLON newline_seq_opt .

    $default  reduce using rule 60 (do_while_stmt)


State 190

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   65 case_stmt: CASE exp . ':' newline_seq_opt
   66          | CASE exp . ':' newline_seq_opt stmt_list

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ':'            shift, and go to state 199


State 191

   67 default_stmt: DEFAULT . ':' newline_seq_opt stmt_list

    ':'  shift, and go to state 200


State 192

   61 switch_stmt: SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list '}' . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 201


State 193

   64 case_stmt_list: case_stmt_list case_stmt .

    $default  reduce using rule 64 (case_stmt_list)


State 194

   62 switch_stmt: SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list default_stmt . '}' newline_seq_opt

    '}'  shift, and go to state 202


State 195

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt '(' id_list_opt ')' newline_seq_opt '{' newline_seq_opt . stmt_list_opt '}' newline_seq_opt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    $default  reduce using rule 82 (stmt_list_opt)

    exp             go to state 25
    stmt            go to state 26
    stmt_list       go to state 203
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    stmt_list_opt   go to state 204
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 196

    8 exp: exp . '[' exp ']'
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | exp . '%' exp
   15    | exp . EQUAL exp
   16    | exp . STRICT_EQUAL exp
   17    | exp . NOT_EQUAL exp
   18    | exp . '>' exp
   19    | exp . '<' exp
   20    | exp . BIGGER_EQUAL exp
   21    | exp . SMALLER_EQUAL exp
   22    | exp . ASSIGNMENT exp
   23    | exp . "**" exp
   24    | exp . OR exp
   25    | exp . AND exp
   57 elseif_stmt: ELSEIF newline_seq_opt '(' exp . ')' newline_seq_opt stmt

    EQUAL          shift, and go to state 60
    STRICT_EQUAL   shift, and go to state 61
    NOT_EQUAL      shift, and go to state 62
    BIGGER_EQUAL   shift, and go to state 63
    SMALLER_EQUAL  shift, and go to state 64
    ASSIGNMENT     shift, and go to state 84
    "**"           shift, and go to state 66
    OR             shift, and go to state 67
    AND            shift, and go to state 68
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '+'            shift, and go to state 72
    '-'            shift, and go to state 73
    '*'            shift, and go to state 74
    '/'            shift, and go to state 75
    '%'            shift, and go to state 76
    '['            shift, and go to state 77
    ')'            shift, and go to state 205


State 197

   54 if_stmt: IF newline_seq_opt '(' exp ')' newline_seq_opt stmt elseif_stmt_list ELSE newline_seq_opt stmt .

    $default  reduce using rule 54 (if_stmt)


State 198

   58 for_stmt: FOR newline_seq_opt '(' exp SEMICOLON exp SEMICOLON exp ')' newline_seq_opt stmt .

    $default  reduce using rule 58 (for_stmt)


State 199

   65 case_stmt: CASE exp ':' . newline_seq_opt
   66          | CASE exp ':' . newline_seq_opt stmt_list

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 206


State 200

   67 default_stmt: DEFAULT ':' . newline_seq_opt stmt_list

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 207


State 201

   61 switch_stmt: SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list '}' newline_seq_opt .

    $default  reduce using rule 61 (switch_stmt)


State 202

   62 switch_stmt: SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list default_stmt '}' . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 208


State 203

   47 stmt_list: stmt_list . stmt
   83 stmt_list_opt: stmt_list .

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    $default  reduce using rule 83 (stmt_list_opt)

    exp             go to state 25
    stmt            go to state 79
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 204

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt '(' id_list_opt ')' newline_seq_opt '{' newline_seq_opt stmt_list_opt . '}' newline_seq_opt

    '}'  shift, and go to state 209


State 205

   57 elseif_stmt: ELSEIF newline_seq_opt '(' exp ')' . newline_seq_opt stmt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 210


State 206

   65 case_stmt: CASE exp ':' newline_seq_opt .
   66          | CASE exp ':' newline_seq_opt . stmt_list

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    $default  reduce using rule 65 (case_stmt)

    exp             go to state 25
    stmt            go to state 26
    stmt_list       go to state 211
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 207

   67 default_stmt: DEFAULT ':' newline_seq_opt . stmt_list

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    exp             go to state 25
    stmt            go to state 26
    stmt_list       go to state 212
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 208

   62 switch_stmt: SWITCH newline_seq_opt '(' exp ')' newline_seq_opt '{' newline_seq_opt case_stmt_list default_stmt '}' newline_seq_opt .

    $default  reduce using rule 62 (switch_stmt)


State 209

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt '(' id_list_opt ')' newline_seq_opt '{' newline_seq_opt stmt_list_opt '}' . newline_seq_opt

    NEWLINE  shift, and go to state 42

    $default  reduce using rule 70 (newline_seq_opt)

    newline_seq      go to state 43
    newline_seq_opt  go to state 213


State 210

   57 elseif_stmt: ELSEIF newline_seq_opt '(' exp ')' newline_seq_opt . stmt

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    exp             go to state 25
    stmt            go to state 214
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 211

   47 stmt_list: stmt_list . stmt
   66 case_stmt: CASE exp ':' newline_seq_opt stmt_list .

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    $default  reduce using rule 66 (case_stmt)

    exp             go to state 25
    stmt            go to state 79
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 212

   47 stmt_list: stmt_list . stmt
   67 default_stmt: DEFAULT ':' newline_seq_opt stmt_list .

    DIGIT               shift, and go to state 1
    FLOAT_DIGIT         shift, and go to state 2
    ID                  shift, and go to state 3
    STRINGONEQOUTED     shift, and go to state 4
    STRINGDOUBLEQUOTED  shift, and go to state 5
    NOT                 shift, and go to state 6
    IF                  shift, and go to state 7
    FOR                 shift, and go to state 8
    WHILE               shift, and go to state 9
    DO                  shift, and go to state 10
    SWITCH              shift, and go to state 11
    BREAK               shift, and go to state 12
    INPUT               shift, and go to state 13
    OUTPUT              shift, and go to state 14
    SEMICOLON           shift, and go to state 15
    LET                 shift, and go to state 16
    VAR                 shift, and go to state 17
    CONST               shift, and go to state 18
    FUNCTION            shift, and go to state 19
    '+'                 shift, and go to state 20
    '-'                 shift, and go to state 21
    '('                 shift, and go to state 22
    '{'                 shift, and go to state 23

    $default  reduce using rule 67 (default_stmt)

    exp             go to state 25
    stmt            go to state 79
    type            go to state 28
    if_stmt         go to state 29
    for_stmt        go to state 30
    while_stmt      go to state 31
    do_while_stmt   go to state 32
    switch_stmt     go to state 33
    for_of          go to state 34
    array_handling  go to state 35
    function_stmt   go to state 36
    function_call   go to state 37
    input           go to state 38
    output          go to state 39


State 213

   84 function_stmt: FUNCTION newline_seq_opt ID newline_seq_opt '(' id_list_opt ')' newline_seq_opt '{' newline_seq_opt stmt_list_opt '}' newline_seq_opt .

    $default  reduce using rule 84 (function_stmt)


State 214

   57 elseif_stmt: ELSEIF newline_seq_opt '(' exp ')' newline_seq_opt stmt .

    $default  reduce using rule 57 (elseif_stmt)
